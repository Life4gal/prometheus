cmake_minimum_required(VERSION 3.25)

set(PROJECT_NAME_PREFIX "GAL_PROMETHEUS_")

set(
		${PROJECT_NAME_PREFIX}MAJOR_VERSION
		0
)

set(
		${PROJECT_NAME_PREFIX}MINOR_VERSION
		8
)

set(
		${PROJECT_NAME_PREFIX}PATCH_VERSION
		0
)

set(${PROJECT_NAME_PREFIX}VERSION ${${PROJECT_NAME_PREFIX}MAJOR_VERSION}.${${PROJECT_NAME_PREFIX}MINOR_VERSION}.${${PROJECT_NAME_PREFIX}PATCH_VERSION})
set(${PROJECT_NAME_PREFIX}VERSION_NAMESPACE_NAME v_${${PROJECT_NAME_PREFIX}MAJOR_VERSION}_${${PROJECT_NAME_PREFIX}MINOR_VERSION}_${${PROJECT_NAME_PREFIX}PATCH_VERSION})

set(${PROJECT_NAME_PREFIX}MASTER_PROJECT OFF)
if (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(${PROJECT_NAME_PREFIX}MASTER_PROJECT ON)
endif (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)

project(
		prometheus
		VERSION ${${PROJECT_NAME_PREFIX}VERSION}
		DESCRIPTION "prometheus"
		HOMEPAGE_URL "https://github.com/Life4gal/prometheus"
		LANGUAGES CXX
)

if (${PROJECT_NAME_PREFIX}MASTER_PROJECT)
	if (NOT DEFINED CMAKE_BUILD_TYPE)
		set(
				CMAKE_BUILD_TYPE
				RelWithDebInfo
				CACHE
				STRING
				"Choose the type of build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel."
		)
	endif (NOT DEFINED CMAKE_BUILD_TYPE)

	if (NOT DEFINED CMAKE_CXX_VISIBILITY_PRESET)
		set(
				CMAKE_CXX_VISIBILITY_PRESET
				hidden
				CACHE
				STRING
				"Preset for the export of private symbols"
		)
		set(CMAKE_CXX_VISIBILITY_PRESET hidden)
		set(CMAKE_VISIBILITY_INLINES_HIDDEN TRUE)
	endif (NOT DEFINED CMAKE_CXX_VISIBILITY_PRESET)
endif (${PROJECT_NAME_PREFIX}MASTER_PROJECT)

set(
		${PROJECT_NAME_PREFIX}INSTALL_HEADERS
		${CMAKE_INSTALL_INCLUDEDIR}
		CACHE
		STRING
		"Installation directory for include files, a relative path that will be joined with ${CMAKE_INSTALL_PREFIX} or an absolute path."
)

option(${PROJECT_NAME_PREFIX}PEDANTIC "Enable extra warnings and expensive tests." ON)
option(${PROJECT_NAME_PREFIX}WERROR "Halt the compilation with an error on compiler warnings." OFF)
option(${PROJECT_NAME_PREFIX}ASAN "Enable AddressSanitizer." ON)
option(${PROJECT_NAME_PREFIX}DOC "Generate the doc target." ${${PROJECT_NAME_PREFIX}MASTER_PROJECT})
option(${PROJECT_NAME_PREFIX}INSTALL "Generate the install target." ${${PROJECT_NAME_PREFIX}MASTER_PROJECT})
option(${PROJECT_NAME_PREFIX}TEST "Generate the test target." ${${PROJECT_NAME_PREFIX}MASTER_PROJECT})

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
#set(CMAKE_POSITION_INDEPENDENT_CODE ON)

#set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
#set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
#set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
if (NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)
endif (NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)

set(${PROJECT_NAME_PREFIX}ROOT_PATH_CMAKE_SCRIPT ${CMAKE_CURRENT_SOURCE_DIR}/scripts)
set(${PROJECT_NAME_PREFIX}ROOT_PATH_EXTERNAL_LIBRARY ${CMAKE_CURRENT_SOURCE_DIR}/external)

include(${CMAKE_CURRENT_SOURCE_DIR}/scripts/common.cmake)
include(${CMAKE_CURRENT_SOURCE_DIR}/scripts/platform_and_compiler.cmake)
include(${CMAKE_CURRENT_SOURCE_DIR}/scripts/cpu_feature.cmake)
include(${CMAKE_CURRENT_SOURCE_DIR}/scripts/external_installer.cmake)

# build library
include(${CMAKE_CURRENT_SOURCE_DIR}/scripts/library.cmake)

# DOCUMENTS
if (${PROJECT_NAME_PREFIX}DOC)
	# add_subdirectory(doc)
endif (${PROJECT_NAME_PREFIX}DOC)

# TESTS
if (${PROJECT_NAME_PREFIX}TEST)
	enable_testing()
	#add_subdirectory(unit_test)
endif (${PROJECT_NAME_PREFIX}TEST)
